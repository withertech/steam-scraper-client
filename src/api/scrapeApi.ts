/**
 * Scraper
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ErrorResult } from '../model/errorResult';
import { ImagesResult } from '../model/imagesResult';

import {
  ObjectSerializer,
  Authentication,
  Interceptor,
  HttpBearerAuth,
  VoidAuth,
  OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

const defaultBasePath = "https://repo.withertech.com/scraper/api";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ScrapeApiApiKeys {}

export class ScrapeApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    OAuth2PasswordBearer: new OAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(apiKey: string, basePath?: string) {
    if (basePath) {
      this.basePath = basePath;
    }
    this.accessToken = apiKey;
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  set accessToken(token: string) {
    this.authentications.OAuth2PasswordBearer.accessToken = token;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Scrapes a rom for steam rom manager from screenscraper.fr using name of file and md5 sum
   * @param filename name of the rom
   * @param md5 md5 of the rom
   */
  public async scrape(
    filename: string,
    md5: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ImagesResult | ErrorResult;
  }> {
    const localVarPath = this.basePath + '/scrape';
    const localVarQueryParameters: any = {};
    const localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    const localVarFormParams: any = {};

    // verify required parameter 'filename' is not null or undefined
    if (filename === null || filename === undefined) {
      throw new Error(
        'Required parameter filename was null or undefined when calling scrape.'
      );
    }

    // verify required parameter 'md5' is not null or undefined
    if (md5 === null || md5 === undefined) {
      throw new Error(
        'Required parameter md5 was null or undefined when calling scrape.'
      );
    }

    if (filename !== undefined) {
      localVarQueryParameters['filename'] = ObjectSerializer.serialize(
        filename,
        'string'
      );
    }

    if (md5 !== undefined) {
      localVarQueryParameters['md5'] = ObjectSerializer.serialize(
        md5,
        'string'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    const localVarUseFormData = false;

    const localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.OAuth2PasswordBearer.applyToRequest(
        localVarRequestOptions
      )
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ImagesResult | ErrorResult;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              if (body["code"] === undefined)
                body = ObjectSerializer.deserialize(body, "ImagesResult");
              else body = ObjectSerializer.deserialize(body, "ErrorResult");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
